# Generated by the windmill services transformer
# Licensed to Cloudera, Inc. under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Cloudera, Inc. licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os

import OpenSSL.SSL
import requests
from django.contrib.staticfiles.handlers import StaticFilesHandler
from nose.tools import assert_true, assert_equal

from desktop import conf
from desktop.lib import cherrypy

ROOT = os.path.dirname(__file__)

def create_thread():
  return cherrypy.CherryPyServerThread('localhost', range(8000, 8100), StaticFilesHandler)


def test_ssl_works():
  resets = [
    conf.SSL_CERTIFICATE.set_for_testing(os.path.join(ROOT, 'cert.pem')),
    conf.SSL_PRIVATE_KEY.set_for_testing(os.path.join(ROOT, 'key.pem')),
  ]

  try:
    server = create_thread()
    server.start()
    server.is_ready.wait()
    assert_true(server.error is None, server.error)

    response = requests.get('https://localhost:%s' % server.port, verify=False)

    assert_equal(response.status_code, 200)

    server.terminate()
  finally:
    for reset in resets:
      reset()


def test_ssl_cert_with_password_works():
  resets = [
    conf.SSL_CERTIFICATE.set_for_testing(os.path.join(ROOT, 'cert.pem')),
    conf.SSL_PRIVATE_KEY.set_for_testing(os.path.join(ROOT, 'key-with-password.pem')),
    conf.SSL_PASSWORD.set_for_testing('password'),
  ]

  try:
    server = create_thread()
    server.start()
    server.is_ready.wait()
    assert_true(server.error is None, server.error)

    response = requests.get('https://localhost:%s' % server.port, verify=False)

    assert_equal(response.status_code, 200)

    server.terminate()
  finally:
    for reset in resets:
      reset()


def test_ssl_cert_with_wrong_password_does_not_work():
  resets = [
    conf.SSL_CERTIFICATE.set_for_testing(os.path.join(ROOT, 'cert.pem')),
    conf.SSL_PRIVATE_KEY.set_for_testing(os.path.join(ROOT, 'key-with-password.pem')),
    conf.SSL_PASSWORD.set_for_testing('bad-password'),
  ]

  try:
    server = create_thread()
    server.start()
    server.is_ready.wait()
    assert_true(isinstance(server.error, OpenSSL.SSL.Error))
  finally:
    for reset in resets:
      reset()
