# Generated by the windmill services transformer
# Licensed to Cloudera, Inc. under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Cloudera, Inc. licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import absolute_import

import os

from desktop import conf
from desktop.lib.selenium_util import HueLiveServerTestCase

class Auth(HueLiveServerTestCase):
  def test_login_and_logout(self):
    self.logged_in_client()
    self.logout()


class SSL(HueLiveServerTestCase):
  @classmethod
  def setUpClass(cls):
    root = os.path.dirname(__file__)
    cls.resets = [
      conf.SSL_CERTIFICATE.set_for_testing(os.path.join(root, 'cert.pem')),
      conf.SSL_PRIVATE_KEY.set_for_testing(os.path.join(root, 'key.pem')),
    ]
    super(SSL, cls).setUpClass()

  @classmethod
  def tearDownClass(cls):
    for reset in cls.resets:
      reset()
    super(SSL, cls).tearDownClass()

  def test_can_log_in(self):
    self.logged_in_client()
    self.logout()


class SSLWithPassword(HueLiveServerTestCase):
  @classmethod
  def setUpClass(cls):
    root = os.path.dirname(__file__)
    cls.resets = [
      conf.SSL_CERTIFICATE.set_for_testing(os.path.join(root, 'cert.pem')),
      conf.SSL_PRIVATE_KEY.set_for_testing(os.path.join(root, 'key-with-password.pem')),
      conf.SSL_PASSWORD.set_for_testing('password'),
    ]
    super(SSL, cls).setUpClass()

  @classmethod
  def tearDownClass(cls):
    for reset in cls.resets:
      reset()
    super(SSL, cls).tearDownClass()

  def test_can_log_in(self):
    self.logged_in_client()
    self.logout()
